Classes:
    - Named with nouns
    - Way to organize code
    - Classes can contain functions
    - Can be imported as modules into other files

    - Instance: an object that belongs to a class
        - Created like this: instance = class(self, parameter1, parameter2, etc.)
        - Each instance has data that is defined (assigned or changed) in the class but is stored and belongs to the instance
        - To allow each instance to store its own data, we need to initialize data using the
        __init(self, variable1, variable_2, etc.)__ (called a dunder) function:
        When you create an instance of a class, Python automatically looks for a dunder, if it does, the code is executed
        Dunder--> initializes data, giving it an initial value

    - The variable "self" acts as a container (actually a dictionary behind the scenes) that contains all the variables that are part of self-->
    all one has to do is pass the variable self to the function--> gives it access to all the variables that belong to the instance
    - Name space (should be called self): all variables that have the same namespace belong to the same class

    - guard clause : if __name__ == "__main__": if a program is run __name__ is set to main, if it is imported, it doesn't, the conditional
    statement evaluated to false and the code beneath it doesn't run
        - define a variable and save all the code that you don't want to be run if the module is imported under it and then write:
            if __name__ == "__main__":
                function()
            This way, if you really want to run the function, you can use it as well

    - Inheritance:
        - Classes take code from other classes,
        - The class that is being inherited from--> superclass
        - The class that is inheriting --> subclass
        - In the subclass, you can overwrite certain methods or add methods
            - To overwrite a method, name a method using the same name as used in the superclass but define it differently
        - Avoid writing the same lines of code multiple times when there is only a slight difference between classes
        - Done like this: class subclass(superclass):
        - E.g. A banking might need a class for a savings account and a deposit account, the core functions should be the same
          but there might be some minor differences, such as interest rates & withdrawal limits
        - Question: in the above stated example, would it be better to define "deposit account" as a superclass and
          "savings account" as a subclass or to define a superclass simply called "account" and define both
          "deposit account" and "savings account" as subclasses?





classes can be imported as modules (good ideas to use import directly not from import)

Side notes:
    Pass statement: used for something that hasn't been fully developed so the code you have written works but the rest is skipped
    checking = account()--> instantiation: "checking" is the instance
    use underscores to sort numbers to see how many digits there are eg. 100_000




the class "account" has now been assigned to the variable "checking", the type of which is account

Are attributes simply variables in the context of classes?
    In python terms ONLY : Property of a class that is a member function or data item
    Attributes vs methods: Method: Function
    Attribute: Data & function
    In other languages: Member functions = functions defined in a class, attributes: Data

After I started using Pysnooper, python has started showing me that there is an error on line 305, for example, which doesn't exist.
Why is this? Is it because the wrapper extends the length of the program and I just don't see it?
    Code in wrapper does extend code. Functions call functions that call other functions--> sometimes the data passed doesn't work with one of the
    embedded functions--> error

Would I be correct in saying that I still have to initialise a subclass but that I can use the super().__innit()__ to copy all the methods from the parent class?

Instances as attributes--> example: does the line numbered 4 (self.battery = Battery() create an instance of the entire class?
What if more than one value is returned in the instance of the class Battery? Is there any way to access only one of them?
e.g. class Battery:
    def __innit__(self, brand = "Tesla", size = 75)
        self.brand = brand
        self.size = size
perhaps something like self.battery = Battery.battery_size()?
no--> this:
self.battery = Battery()--> Instantiate first
tesla = Car()
tesla.battery.brand()
Methods, data& functions are defined in a class, but they can only be accessed through an instance
Class = template/mold that describes how an object should be formed

ElectricCar creates an instance of the class Battery
A class can contain instances of other classes as a property (composition--> Battery is composed into car).
You access those by using the instance variable in
the containing class and the properties of the containing class

Tip for defining classes: Define the classes to help us discover other classes& bring clarity when writing programs (use doc string)
a faculty is a program that is taught in a university a group of professors
HW: define some more classes like the one above and write code for them

class Student:
    """ A student is a person who has paid to learn at a university and gain a qualification"""
    pass
Build a pyfile from scratch that contains all the classes--> domain model(education in this case)--> All the classes in one pyfile
use it in another pyfile by importing--> database hidden behind

Classes are mainly used to create, store and retrieve data from your domain.
Hidden behind the domain classes: a database ( domain model talks to data base)
We have encapsulated the concept for storing data for our educational institute behind a domain model ( we can use python classes without
worrying about how to store and retrieve data)
Primary reason for storing all data in database:
    - With language defined in the domain model, you can influence& infiltrate all programs written about educational institution ( because you're using
    clearly defined terminology, people can easily look up definitions for terms in the domain model--> Ease of use

    - None of the technical terms are hidden using the domain model, making the code more comprehensible

    - databases are bought from other companies--> Companies can change database language, forcing you to change
    your code--> having a domain model means that you only have to change one program


Databases
    Data in a database is stored in tables--> tables (Database equivalent of a class) store specific type of date e.g. a student table where
    the student class stores its data